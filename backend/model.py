from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
from datetime import datetime, timezone
from sqlalchemy import CheckConstraint, Index, UniqueConstraint

db = SQLAlchemy()

def utc_now():
    return datetime.now(timezone.utc)
 
# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Product ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    sku = db.Column(db.String(50), unique=True, nullable=False) #‡∏£‡∏´‡∏±‡∏™SKU
    category = db.Column(db.String(50), nullable=False) #‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô Vitamin / Drug / ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©  ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏ú‡∏•‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ö data
    unit = db.Column(db.String(20), nullable=False) #‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏ö ‡πÄ‡∏ä‡πà‡∏ô 
    cost_price = db.Column(db.Float, nullable=False) #‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    stock = db.Column(db.Integer, default=0) #‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏£‡∏ß‡∏°
    has_expire = db.Column(db.Boolean, default=False) #‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏´‡∏°
    
    # Timestamp fields (timezone-aware)
    created_at = db.Column(db.DateTime, nullable=False, default=utc_now)
    updated_at = db.Column(db.DateTime, nullable=False, default=utc_now, onupdate=utc_now)

    variants = db.relationship('ProductVariant', backref='product', cascade="all, delete-orphan", lazy="selectin") #‡∏ï‡πà‡∏≠ One-to-Many ‡∏Å‡∏±‡∏ö ProductVariant ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Product 1 ‡∏ä‡∏¥‡πâ‡∏ô‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö
    images = db.relationship('ProductImage', backref='product', cascade="all, delete-orphan", lazy="selectin")  #‡∏ï‡πà‡∏≠ One-to-Many ‡∏Å‡∏±‡∏ö ProductImage ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Product 1 ‡∏ä‡∏¥‡πâ‡∏ô‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏¢‡πÜ 
    @property
    def serialized_variants(self):
        return [
            {
                "id": v.id,
                "sku_suffix": v.sku_suffix,
                "sale_mode": v.sale_mode,
                "pack_size": v.pack_size,
                "selling_price": v.selling_price,
                "is_active": v.is_active,
            }
            for v in self.variants
        ]
    
    @property
    def main_image(self):
        main = next((img for img in self.images if img.is_main), None)
        return main.image_filename if main else None
    
# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Product ‡∏ï‡∏≤‡∏° ID
class ProductVariant(db.Model):  
    __tablename__ = 'product_variant'
    id = db.Column(db.Integer, primary_key=True)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False) #Id ‡∏Ç‡∏≠‡∏á Product
    sale_mode = db.Column(db.String(50),  nullable=False)  # ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ (single, pack, box) 
    sku_suffix = db.Column(db.String(50), nullable=False)  # optional ‡πÄ‡∏ä‡πà‡∏ô -P5, -P10
    pack_size = db.Column(db.Integer, nullable=False)# ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡πÄ‡∏ä‡πà‡∏ô 5, 10  [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏¢‡πà‡∏≠‡∏¢‡∏ï‡πà‡∏≠‡πÅ‡∏û‡πá‡∏Ñ (‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≤‡∏¢)]
    selling_price = db.Column(db.Float, nullable=False)  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢
    is_active = db.Column(db.Boolean, default=True) # ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° Soft Delete
    
    def to_dict(self):
        return {
            "id": self.id,
            "sku_suffix": self.sku_suffix,
            "sale_mode": self.sale_mode,
            "pack_size": self.pack_size,
            "selling_price": self.selling_price,
            "is_active":self.is_active
        }

# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏Ç‡∏≠‡∏á Product
class ProductImage(db.Model):
    __tablename__ = 'product_image'
    id = db.Column(db.Integer, primary_key=True)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False) #Id ‡∏Ç‡∏≠‡∏á Product
    image_filename = db.Column(db.String(200), nullable=False)  # ‡πÄ‡∏ä‡πà‡∏ô 'image1.jpg'
    alt_text = db.Column(db.String(100)) 
    is_main = db.Column(db.Boolean, default=False)  

# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö history stock-in of Product = ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤(‡∏ã‡∏∑‡πâ‡∏≠)‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÜ
class StockIn(db.Model):
    __tablename__ = 'stock_in'
    id = db.Column(db.Integer, primary_key=True)

    doc_number = db.Column(db.String(50), unique=True, nullable=False) #‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ GRN-2025-08-001
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    note = db.Column(db.String(255), nullable=True) #‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
    image_filename = db.Column(db.String(255), nullable=True)

    # üëá ‡πÉ‡∏™‡πà expiry ‡∏Ç‡∏≠‡∏á ‚Äú‡∏£‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‚Äù ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö entries ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    expiry_date = db.Column(db.Date, nullable=True) 

    # 1 StockIn -> N Entries
    entries = db.relationship("StockInEntry", back_populates="stockin", cascade="all, delete-orphan",passive_deletes=True)

    # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏≤‡∏Å query ‡∏î‡∏π batch ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    batches = db.relationship("StockBatch",back_populates="stockin", passive_deletes=True,lazy="select")
    

# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏ï‡∏≤‡∏°Stock-in-id
class StockInEntry(db.Model):
    __tablename__ = 'stock_in_entry'
    id = db.Column(db.Integer, primary_key=True)

    # ‡∏≠‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ (StockIn)
    stockin_id = db.Column(db.Integer, db.ForeignKey('stock_in.id', ondelete='CASCADE'), nullable=False)
    stockin = db.relationship("StockIn", back_populates="entries")

    # Product + Variant (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡∏Å variant ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ custom)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id', ondelete='CASCADE'), nullable=False)
    product = db.relationship("Product", backref=db.backref("stockin_entries", lazy="dynamic"))

    variant_id = db.Column(db.Integer, db.ForeignKey('product_variant.id', ondelete='SET NULL'), nullable=True)
    variant = db.relationship("ProductVariant")

    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô custom variant ‡∏ó‡∏µ‡πà user ‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏á
    custom_sale_mode = db.Column(db.String(50), nullable=True)   # ‡πÄ‡∏ä‡πà‡∏ô "doublePack"
    custom_pack_size = db.Column(db.Integer, nullable=True)      # ‡πÄ‡∏ä‡πà‡∏ô 20

    # snapshot ‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! ‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ variant ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
    pack_size_at_receipt = db.Column(db.Integer, nullable=False)  # ‡πÄ‡∏ä‡πà‡∏ô 10 ‡πÄ‡∏°‡πá‡∏î/‡∏Ç‡∏ß‡∏î/‡∏Å‡∏•‡πà‡∏≠‡∏á ‡∏ï‡πà‡∏≠ pack

    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô pack ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤
    quantity = db.Column(db.Integer, nullable=False)

    # ‡∏´‡∏•‡∏≤‡∏¢ Entry -> 1 Batch (‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏° lot/expiry)
    batch_id = db.Column(db.Integer, db.ForeignKey('stock_batch.id', ondelete='SET NULL'), nullable=True)
    batch = db.relationship("StockBatch", back_populates="entries")

    __table_args__ = (
        CheckConstraint('pack_size_at_receipt > 0', name='ck_entry_pack_size_positive'),
        CheckConstraint('quantity > 0',            name='ck_entry_qty_positive'),
    )

class StockBatch(db.Model):
    __tablename__ = 'stock_batch'
    id = db.Column(db.Integer, primary_key=True)

    # ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö header + product (‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°)
    stockin_id = db.Column(db.Integer, db.ForeignKey('stock_in.id', ondelete='CASCADE'), nullable=False)
    stockin    = db.relationship("StockIn", back_populates="batches")

    product_id = db.Column(db.Integer, db.ForeignKey('product.id', ondelete='CASCADE'), nullable=False)
    product = db.relationship("Product", backref=db.backref("batches", lazy="dynamic"))

    lot_number = db.Column(db.String(100), nullable=True)
    expiry_date = db.Column(db.Date, nullable=True)

    qty_received = db.Column(db.Integer, nullable=False, default=0)
    qty_remaining = db.Column(db.Integer, nullable=False, default=0)

    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)

    # 1 Batch -> N Entries (‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ trace ‡∏ß‡πà‡∏≤ batch ‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å entries ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á)    
    entries = db.relationship("StockInEntry", back_populates="batch", lazy="dynamic")

    __table_args__ = (
        # FEFO / report
        db.Index('ix_batch_product_expiry', 'product_id', 'expiry_date'),
        CheckConstraint('qty_received >= 0',  name='ck_batch_qty_received_nonneg'),
        CheckConstraint('qty_remaining >= 0', name='ck_batch_qty_remaining_nonneg'),
        # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö "1 ‡∏Å‡πâ‡∏≠‡∏ô‡∏ï‡πà‡∏≠ (stockin, product, lot, expiry)"
        # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ñ‡πâ‡∏≤ lot_number ‡πÄ‡∏õ‡πá‡∏ô NULL, DB ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏à‡∏∞‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï NULL ‡∏ã‡πâ‡∏≥ ‚Üí ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ generate lot_number ‡πÄ‡∏™‡∏°‡∏≠‡πÉ‡∏ô service
        UniqueConstraint('stockin_id', 'product_id', 'lot_number', 'expiry_date', name='uq_batch_stockin_prod_lot_exp'),
    )

# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ # 1) ‡∏´‡∏±‡∏ß‡πÉ‡∏ö‡∏Ç‡∏≤‡∏¢
class Sale(db.Model):
    __tablename__ = 'sale'
    id = db.Column(db.Integer, primary_key=True)

    channel_id = db.Column(db.Integer, db.ForeignKey('sales_channel.id', ondelete='RESTRICT'), nullable=False)
    sale_date  = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)

    # snapshot channel (‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô % ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
    channel_name_at_sale         = db.Column(db.String(50), nullable=False)
    commission_percent_at_sale   = db.Column(db.Float, default=0.0)   # % ‡∏ó‡∏±‡πâ‡∏á‡∏ö‡∏¥‡∏•
    transaction_percent_at_sale  = db.Column(db.Float, default=0.0)   # % ‡∏ó‡∏±‡πâ‡∏á‡∏ö‡∏¥‡∏•

    # ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤/‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (optional)
    customer_name = db.Column(db.String(100))
    province      = db.Column(db.String(100))
    # note          = db.Column(db.String(255))

    # ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ö‡∏¥‡∏• (‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì)
    subtotal        = db.Column(db.Float, default=0.0)   # ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î/‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°)
    shipping_fee    = db.Column(db.Float, default=0.0)
    shop_discount   = db.Column(db.Float, default=0.0)
    platform_discount = db.Column(db.Float, default=0.0)
    coin_discount     = db.Column(db.Float, default=0.0)
    vat_amount      = db.Column(db.Float, default=0.0)
    commission_fee  = db.Column(db.Float, default=0.0)
    transaction_fee = db.Column(db.Float, default=0.0)
    customer_pay    = db.Column(db.Float, default=0.0)
    seller_receive  = db.Column(db.Float, default=0.0)

    items   = db.relationship("SaleItem", back_populates="sale", cascade="all, delete-orphan")
    channel = db.relationship("SalesChannel", backref=db.backref("sales", lazy="dynamic"))

# 2) ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ (1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠ 1 variant ‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ custom)
class SaleItem(db.Model):
    __tablename__ = 'sale_item'
    id = db.Column(db.Integer, primary_key=True)

    sale_id = db.Column(db.Integer, db.ForeignKey('sale.id', ondelete='CASCADE'), nullable=False)
    sale    = db.relationship("Sale", back_populates="items")

    product_id = db.Column(db.Integer, db.ForeignKey('product.id', ondelete='RESTRICT'), nullable=False)
    product    = db.relationship("Product")

    variant_id = db.Column(db.Integer, db.ForeignKey('product_variant.id', ondelete='RESTRICT'), nullable=False)
    variant    = db.relationship("ProductVariant")

    # snapshot ‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≤‡∏¢ (‡∏•‡πá‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å variant ‡∏ì ‡∏Ç‡∏ì‡∏∞‡∏Ç‡∏≤‡∏¢)
    sale_mode_at_sale  = db.Column(db.String(50), nullable=False)  # ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏°‡∏î ‡πÄ‡∏ä‡πà‡∏ô "‡πÇ‡∏´‡∏•", "‡∏•‡∏±‡∏á"
    pack_size_at_sale  = db.Column(db.Integer,    nullable=False)  # base/pack ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≤‡∏¢
    quantity_pack      = db.Column(db.Integer,    nullable=False)  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏û‡πá‡∏Ñ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢
    unit_price_at_sale = db.Column(db.Float,      nullable=False)  # ‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÅ‡∏û‡πá‡∏Ñ

    # ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    base_units  = db.Column(db.Integer, nullable=False)            # pack_size_at_sale * quantity_pack
    line_total  = db.Column(db.Float, default=0.0)                 # unit_price_at_sale * quantity_pack (‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏´‡∏±‡∏ß‡∏ö‡∏¥‡∏•/VAT)

    # ‡πÅ‡∏°‡∏õ‡∏•‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á (FEFO)
    batches = db.relationship("SaleItemBatch", back_populates="sale_item", cascade="all, delete-orphan")

    __table_args__ = (
        CheckConstraint('pack_size_at_sale > 0', name='ck_saleitem_pack_size_pos'),
        CheckConstraint('quantity_pack > 0',     name='ck_saleitem_qty_pos'),
        CheckConstraint('base_units > 0',        name='ck_saleitem_base_pos'),
    )

# 3) ‡πÅ‡∏°‡∏õ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á SaleItem ‡∏Å‡∏±‡∏ö StockBatch (‡∏ï‡∏±‡∏î FEFO ‡∏´‡∏•‡∏≤‡∏¢‡∏•‡πá‡∏≠‡∏ï‡πÑ‡∏î‡πâ)
class SaleItemBatch(db.Model):
    __tablename__ = 'sale_item_batch'
    id = db.Column(db.Integer, primary_key=True)

    sale_item_id = db.Column(db.Integer, db.ForeignKey('sale_item.id', ondelete='CASCADE'), nullable=False)
    sale_item    = db.relationship("SaleItem", back_populates="batches")

    product_id = db.Column(db.Integer, db.ForeignKey('product.id', ondelete='RESTRICT'), nullable=False)
    batch_id   = db.Column(db.Integer, db.ForeignKey('stock_batch.id', ondelete='RESTRICT'), nullable=False)

    qty = db.Column(db.Integer, nullable=False)  # base units ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏•‡πá‡∏≠‡∏ï‡∏ô‡∏µ‡πâ
    batch = db.relationship("StockBatch")

    __table_args__ = (
        CheckConstraint('qty > 0', name='ck_saleitembatch_qty_pos'),
        Index('ix_sib_batch', 'batch_id'),
    )

# 4) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å movement (IN/OUT/EXPIRED/ADJUST/VOID)
class StockMovement(db.Model):
    __tablename__ = 'stock_movement'
    id = db.Column(db.Integer, primary_key=True)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id', ondelete='RESTRICT'), nullable=False)
    batch_id   = db.Column(db.Integer, db.ForeignKey('stock_batch.id', ondelete='SET NULL'))
    movement_type = db.Column(db.String(20), nullable=False)  # IN / OUT / EXPIRED / ADJUST / VOID
    qty = db.Column(db.Integer, nullable=False)               # +IN / -OUT (base units)
    batch_qty_remaining = db.Column(db.Integer, nullable=False)
    ref_stockin_id = db.Column(db.Integer, db.ForeignKey('stock_in.id'))
    ref_sale_id    = db.Column(db.Integer, db.ForeignKey('sale.id'))
    note = db.Column(db.String(255))
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)

    __table_args__ = (
        CheckConstraint('qty != 0', name='ck_movement_qty_nonzero'),
        Index('ix_mov_product_created', 'product_id', 'created_at'),
    )

# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á platform ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô/‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡∏´‡∏±‡∏Å‡∏à‡∏≤‡∏Å platform ‡∏ï‡πà‡∏≤‡∏á‡πÜ
class SalesChannel(db.Model): 
    __tablename__ = 'sales_channel'
    id = db.Column(db.Integer, primary_key=True)
    channel_name = db.Column(db.String(50), unique=True, nullable=False) #‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
    store_desc = db.Column(db.String(255)) #‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
    platform_tier_id = db.Column(db.Integer, db.ForeignKey("platform_tier.id"), nullable=False)
    is_active = db.Column(db.Boolean, default=True) # ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° Soft Delete
    
    platform_tier = db.relationship("PlatformTier", backref="stores")

# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á platform ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô/‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡∏´‡∏±‡∏Å‡∏à‡∏≤‡∏Å platform ‡∏ï‡πà‡∏≤‡∏á‡πÜ
class Platform(db.Model):
    __tablename__ = "platform"
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False, unique=True)  # Shopee, Lazada, TikTokShop
    note = db.Column(db.Text)

class PlatformTier(db.Model):
    __tablename__ = "platform_tier"
    id = db.Column(db.Integer, primary_key=True)
    platform_id = db.Column(db.Integer, db.ForeignKey("platform.id"), nullable=False)
    name = db.Column(db.String(50), nullable=False)  # Mall, Normal, YellowFlag
    commission_percent = db.Column(db.Float, nullable=False)  # %
    transaction_percent = db.Column(db.Float, nullable=False)  # %
    # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
    platform = db.relationship("Platform", backref="tiers")