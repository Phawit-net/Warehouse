from flask import abort, Blueprint, current_app, jsonify, request, send_from_directory
from model import Sale, SaleItem, StockBatch, StockIn, StockInEntry, StockMovement, db, Product, ProductVariant, ProductImage
from werkzeug.utils import secure_filename
from sqlalchemy.orm import selectinload, joinedload
from sqlalchemy.exc import SQLAlchemyError
import os
import json
import uuid
from sqlalchemy import func

product_bp = Blueprint('product_bp', __name__, url_prefix='/api/inventory')

ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif','webp'}
UPLOAD_FOLDER = os.path.join(os.getcwd(), 'uploads')  # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

# Utility
# function file extension ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# function generate ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
def generate_unique_filename(filename):
    ext = filename.rsplit(".", 1)[-1]
    return f"{uuid.uuid4().hex}.{ext}"

# function save file ‡πÑ‡∏õ‡∏ó‡∏µ‡πà folder Upload
def save_image(file):
    filename = generate_unique_filename(secure_filename(file.filename))
    file.save(os.path.join(UPLOAD_FOLDER, filename))
    return filename

# function delete file ‡∏ó‡∏µ‡πà folder Upload
def delete_image_file(filename):
    path = os.path.join(UPLOAD_FOLDER, filename)
    if os.path.exists(path):
        os.remove(path)

def _get_receipts_dir():
    base = current_app.config.get("RECEIPTS_DIR")
    if base:
        return base
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default uploads/receipts
    upload_base = current_app.config.get("UPLOAD_FOLDER", "uploads")
    return os.path.join(upload_base, "receipts")

def _delete_receipt_file(filename: str | None):
    if not filename:
        return
    try:
        receipts_dir = _get_receipts_dir()
        path = os.path.join(receipts_dir, filename)
        # ‡∏Å‡∏±‡∏ô path traversal
        path = os.path.normpath(path)
        if os.path.commonpath([receipts_dir, path]) != os.path.normpath(receipts_dir):
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå receipts ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏•‡∏ö
            return
        if os.path.isfile(path):
            os.remove(path)
    except Exception as e:
        # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏ö DB ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        current_app.logger.warning(f"‚ö†Ô∏è Failed to delete receipt file {filename}: {e}")

# API - ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö PRODUCTS ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
# 1. API GET - get all product
@product_bp.route('/', methods=['GET'])
def get_all_products():
    try:
        page = int(request.args.get('page', 1))
        limit = int(request.args.get('limit', 10))
        offset = (page - 1) * limit

        # ‡∏™‡∏£‡∏∏‡∏õ stock ‡∏ï‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏à‡∏≤‡∏Å StockBatch
        stock_subq = (
            db.session.query(
                StockBatch.product_id.label('pid'),
                func.coalesce(func.sum(StockBatch.qty_remaining), 0).label('stock_qty')
            )
            .group_by(StockBatch.product_id)
            .subquery()
        )

        # ‡∏î‡∏∂‡∏á Product + stock ‡∏£‡∏ß‡∏° (LEFT JOIN ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ batch ‡πÄ‡∏•‡∏¢ ‚Üí 0)
        rows = (
            db.session.query(
                Product,
                func.coalesce(stock_subq.c.stock_qty, 0).label('stock_total')
            )
            .outerjoin(stock_subq, stock_subq.c.pid == Product.id)
            .options(
                selectinload(Product.images),
                selectinload(Product.variants),
            )
            .offset(offset)
            .limit(limit)
            .all()
        )

        total = db.session.query(func.count(Product.id)).scalar()

        data = []
        for p, stock_total in rows:
            data.append({
                "id": p.id,
                "name": p.name,
                "sku": p.sku,
                "category": p.category,
                "unit": p.unit,
                "cost_price": p.cost_price,
                # ‡πÉ‡∏ä‡πâ stock_total ‡∏à‡∏≤‡∏Å StockBatch (‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ä‡πâ p.stock)
                "stock": int(stock_total or 0),
                "has_expire": getattr(p, "has_expire", None),
                "variants": getattr(p, "serialized_variants", []),
                "images": [
                    {"filename": img.image_filename, "is_main": img.is_main}
                    for img in p.images
                ],
            })

        result = {
            "data": data,
            "pagination": {
                "page": page,
                "limit": limit,
                "total": total,
                "total_pages": (total + limit - 1) // limit
            }
        }
        return jsonify(result), 200

    except Exception as e:
        return jsonify({"error": f"‚ùå Failed to fetch products: {str(e)}"}), 500


# 2. API POST - add new product
@product_bp.route('/', methods=['POST'])
def create_product():
    data = request.form
    main_image = request.files.get("main_image")
    other_images = request.files.getlist("other_images")

    try:
        # üìå Validate required fields (optional ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
        required_fields = ["name", "sku", "category", "unit", "cost_price", "variants"]
        for field in required_fields:
            if not data.get(field):
                return jsonify({"error": f"‚ùå Missing required field: {field}"}), 400

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Product
        new_product = Product(
            name=data["name"],
            sku=data["sku"],
            category=data["category"],
            unit=data["unit"],
            cost_price=data["cost_price"],
            has_expire=str(data["has_expire"]).lower() == "true"
        )

        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Variants
        variants_data = json.loads(data["variants"])
        for v in variants_data:
            variant = ProductVariant(
                sku_suffix=v["sku_suffix"],
                sale_mode=v["sale_mode"],
                pack_size=v["pack_size"],
                selling_price=v["selling_price"],
                is_active = v["is_active"]
            )
            new_product.variants.append(variant)
        db.session.add(new_product)
        db.session.flush()

        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        os.makedirs(UPLOAD_FOLDER, exist_ok=True)

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å main image
        if main_image and allowed_file(main_image.filename):
            filename = save_image(main_image)
            db.session.add(ProductImage(product_id=new_product.id, image_filename=filename, is_main=True))

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å other images
        for img in other_images:
            if img and allowed_file(img.filename):
                filename = save_image(img)
                db.session.add(ProductImage(product_id=new_product.id, image_filename=filename, is_main=False))

        db.session.commit()
        return jsonify({"message": "‚úÖ Product and variants created successfully!"}), 201

    except SQLAlchemyError as e:
            db.session.rollback()
            return jsonify({"error": f"‚ùå Database error: {str(e)}"}), 500
    except Exception as e:
        return jsonify({"error": f"‚ùå Unexpected error: {str(e)}"}), 500
    
    
# 3. API File serving - serve image when call API path from front-end
@product_bp.route('/uploads/<filename>')
def uploaded_file(filename):
    # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô path traversal ‡πÄ‡∏ä‡πà‡∏ô "../../etc/passwd"
    filename = secure_filename(filename)

    # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
    file_path = os.path.join(UPLOAD_FOLDER, filename)
    if not os.path.exists(file_path):
        abort(404, description="üìÅ File not found")

    # ‚úÖ ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    return send_from_directory(UPLOAD_FOLDER, filename)


# 4. API DELETE - delete product + relationship of product
@product_bp.route('/<int:product_id>', methods=['DELETE'])
def delete_product(product_id):
    try:
        # ‡∏Å‡∏±‡∏ô autoflush ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        with db.session.no_autoflush:
            product = (
                db.session.query(Product)
                .options(
                    selectinload(Product.images),
                    selectinload(Product.variants),
                )
                .get(product_id)
            )
            if not product:
                return jsonify({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"}), 404

            # 1) ‡∏´‡∏≤ StockIn ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (header ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ)
            stockins = (
                db.session.query(StockIn)
                .join(StockIn.entries)
                .filter(StockInEntry.product_id == product_id)
                .options(
                    joinedload(StockIn.entries),
                    joinedload(StockIn.batches),
                )
                .distinct()
                .all()
            )
            stockin_ids = [si.id for si in stockins]

            # 2) ‡∏´‡∏≤ Batch ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ
            batches = (
                db.session.query(StockBatch)
                .filter(StockBatch.product_id == product_id)
                .all()
            )
            batch_ids = [b.id for b in batches]

            # 3) Guard: ‡∏°‡∏µ ‚Äú‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‚Äù ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‚Üí ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏ö
            sale_item_count = db.session.query(SaleItem)\
                .filter(SaleItem.product_id == product_id).count()
            if sale_item_count > 0:
                return jsonify({
                    "error": "‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ",
                    "sale_items": sale_item_count
                }), 409

            # 4) Guard: ‡∏°‡∏µ‡∏•‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‚Üí ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏ö
            used_batches = [
                {
                    "batch_id": b.id,
                    "lot_number": b.lot_number,
                    "qty_received": int(b.qty_received or 0),
                    "qty_remaining": int(b.qty_remaining or 0),
                    "stockin_id": int(b.stockin_id or 0),
                }
                for b in batches
                if (b.qty_remaining or 0) < (b.qty_received or 0)
            ]
            if used_batches:
                return jsonify({
                    "error": "‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ‡∏°‡∏µ‡∏•‡πá‡∏≠‡∏ï‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß",
                    "conflicts": used_batches,
                    "hint": "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏ï‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô (‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥ flow void/adjust) ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
                }), 409

        # ---- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ----
        with db.session.begin_nested():
            # A) SET NULL FK ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ä‡∏ô‡∏ï‡∏≠‡∏ô‡∏•‡∏ö batch (‡∏Å‡∏±‡∏ô FK fail ‡πÉ‡∏ô SQLite/schema ‡πÄ‡∏Å‡πà‡∏≤)
            if batch_ids:
                db.session.query(StockInEntry)\
                    .filter(StockInEntry.product_id == product_id,
                            StockInEntry.batch_id.in_(batch_ids))\
                    .update({StockInEntry.batch_id: None}, synchronize_session=False)

            # B) ‡∏•‡∏ö movement ‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ (IN) ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (ref_stockin_id)
            if stockin_ids:
                db.session.query(StockMovement)\
                    .filter(StockMovement.ref_stockin_id.in_(stockin_ids))\
                    .delete(synchronize_session=False)

            # C) ‡∏•‡∏ö movement ‡πÉ‡∏î ‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á batch ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ (‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡∏°‡∏µ‡πÅ‡∏ï‡πà IN; ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ)
            if batch_ids:
                db.session.query(StockMovement)\
                    .filter(StockMovement.batch_id.in_(batch_ids))\
                    .delete(synchronize_session=False)

            # D) ‡∏•‡∏ö Batch ‡∏ó‡∏µ‡∏•‡∏∞ instance (‡∏≠‡∏¢‡πà‡∏≤ bulk ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡πÇ‡∏´‡∏•‡∏î instance ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß)
            for b in batches:
                db.session.delete(b)

            # E) ‡∏•‡∏ö StockInEntry ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            db.session.query(StockInEntry)\
                .filter(StockInEntry.product_id == product_id)\
                .delete(synchronize_session=False)

            # F) ‡∏•‡∏ö StockIn header ‡∏ó‡∏µ‡πà ‚Äú‡πÑ‡∏°‡πà‡∏°‡∏µ entries ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‚Äù ‡πÅ‡∏•‡πâ‡∏ß
            for si in stockins:
                remain = db.session.query(func.count(StockInEntry.id))\
                    .filter(StockInEntry.stockin_id == si.id).scalar()
                if remain == 0:
                    # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                    try:
                        _delete_receipt_file(getattr(si, "image_filename", None))
                    except Exception:
                        pass
                    db.session.delete(si)

            # G) ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏ü‡∏•‡πå + rows ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            for img in list(product.images):
                try:
                    delete_image_file(img.image_filename)
                except Exception as file_err:
                    print(f"‚ö†Ô∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {img.image_filename}: {file_err}")
                db.session.delete(img)

            # H) ‡∏•‡∏ö variants ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            for v in list(product.variants):
                db.session.delete(v)

            # I) ‡∏•‡∏ö product ‡∏´‡∏•‡∏±‡∏Å
            db.session.delete(product)

        db.session.commit()
        return jsonify({"message": "‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"}), 200

    except Exception as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500
    
# 5. API GET - get product by ID
@product_bp.route('/<int:product_id>', methods=['GET'])
def get_product_by_id(product_id):
    try:
        product = Product.query.get_or_404(product_id)
        return jsonify({
            "id": product.id,
            "name": product.name,
            "sku": product.sku,
            "category": product.category,
            "unit": product.unit,
            "cost_price": product.cost_price,
            "stock": product.stock,
            "has_expire":product.has_expire,
            "variants": product.serialized_variants,
            "images": [
                {
                    "filename": img.image_filename,
                    "is_main": img.is_main
                }
                for img in product.images
            ]
        }), 200
    
    except Exception as e:
        print("‚ùå ERROR:", e)
        return jsonify({"error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"}), 500

@product_bp.route('/<int:product_id>', methods=['PATCH'])
def update_product(product_id):
    try:
        product = Product.query.get_or_404(product_id)
        data = request.form

        # ---------- helpers ----------
        def to_bool(x):
            if x is None:
                return None
            return str(x).strip().lower() in ('true','1','yes','y','on')

        def to_float(x, field):
            if x is None or x == '':
                return None
            try:
                return float(x)
            except ValueError:
                raise ValueError(f"{field} must be a number")

        # ---------- 1) update product fields with casting ----------
        if 'name' in data:       product.name = data['name']
        if 'sku' in data:        product.sku = data['sku']
        if 'category' in data:   product.category = data['category']
        if 'unit' in data:       product.unit = data['unit']
        if 'cost_price' in data:
            val = to_float(data.get('cost_price'), 'cost_price')
            if val is None:
                product.cost_price = 0.0
            else:
                product.cost_price = val
        if 'has_expire' in data:
            bv = to_bool(data.get('has_expire'))
            if bv is None:
                # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å ignore ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠ None ‡∏Å‡πá‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á 2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
                return jsonify({"error": "‚ùå has_expire must be boolean"}), 400
            product.has_expire = bv

        # ---------- 2) upsert variants (no bulk delete) ----------
        variants_payload = json.loads(data.get("variants", "[]"))

        # map ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤
        old_variants = {v.id: v for v in ProductVariant.query.filter_by(product_id=product.id).all()}
        seen_ids = set()

        for v in variants_payload:
            vid = v.get("id")
            # casting
            try:
                pack_size = int(v["pack_size"])
            except (KeyError, ValueError, TypeError):
                return jsonify({"error": "‚ùå variant.pack_size must be integer"}), 400

            try:
                selling_price = float(v["selling_price"])
            except (KeyError, ValueError, TypeError):
                return jsonify({"error": "‚ùå variant.selling_price must be number"}), 400

            is_active = bool(v.get("is_active", True))

            if vid and vid in old_variants:
                # update
                ov = old_variants[vid]
                ov.sku_suffix    = v["sku_suffix"]
                ov.sale_mode     = v["sale_mode"]
                ov.pack_size     = pack_size
                ov.selling_price = selling_price
                ov.is_active     = is_active
                seen_ids.add(vid)
            else:
                # create
                nv = ProductVariant(
                    product_id=product.id,
                    sku_suffix=v["sku_suffix"],
                    sale_mode=v["sale_mode"],
                    pack_size=pack_size,
                    selling_price=selling_price,
                    is_active=is_active
                )
                db.session.add(nv)

        # ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å payload
        removed = [ov for oid, ov in old_variants.items() if oid not in seen_ids]
        for ov in removed:
            used_in_stockin = db.session.query(StockInEntry.id)\
                .filter(StockInEntry.variant_id == ov.id).first()
            used_in_sale = db.session.query(SaleItem.id)\
                .filter(SaleItem.variant_id == ov.id).first()
            if used_in_stockin or used_in_sale:
                ov.is_active = False  # soft remove
            else:
                db.session.delete(ov)

        # ---------- 3) images ----------
        main_image = request.files.get("main_image")
        if main_image:
            old_main = ProductImage.query.filter_by(product_id=product.id, is_main=True).first()
            if old_main:
                try:
                    delete_image_file(old_main.image_filename)
                except Exception:
                    pass
                db.session.delete(old_main)

            new_filename = save_image(main_image)
            db.session.add(ProductImage(product_id=product.id, image_filename=new_filename, is_main=True))

        other_images = request.files.getlist("other_images")
        for image in other_images:
            if image and image.filename:
                filename = save_image(image)
                db.session.add(ProductImage(product_id=product.id, image_filename=filename, is_main=False))

        images_to_delete = request.form.getlist("images_to_delete")
        for filename in images_to_delete:
            try:
                delete_image_file(filename)
            except Exception:
                pass
            ProductImage.query\
                .filter_by(image_filename=filename, product_id=product.id)\
                .delete(synchronize_session=False)

        db.session.commit()
        return jsonify({"message": "‚úÖ Product updated successfully!"}), 200

    except FileNotFoundError as e:
        db.session.rollback()
        return jsonify({"error": f"‚ùå File not found: {str(e)}"}), 400

    except (ValueError, TypeError) as e:
        db.session.rollback()
        return jsonify({"error": f"‚ùå Invalid data: {str(e)}"}), 400

    except SQLAlchemyError as e:
        db.session.rollback()
        import traceback; traceback.print_exc()
        return jsonify({"error": f"‚ùå DB: {str(e)}"}), 500

    except Exception as e:
        db.session.rollback()
        return jsonify({"error": f"‚ùå Unexpected error: {str(e)}"}), 500

# 7. API Checking Hard Delete in Edit Product
@product_bp.route('/variant/<int:variant_id>', methods=['DELETE'])
def hard_delete_variant(variant_id):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö ProductVariant ‡∏ñ‡∏≤‡∏ß‡∏£ (Hard Delete)
    - ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• StockIn ‡∏´‡∏£‡∏∑‡∏≠ SaleOrder ‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    - ‡∏´‡∏≤‡∏Å‡∏û‡∏ö ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏•‡∏ö
    """
    try:
        # 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ProductVariant ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
        variant = db.session.get(ProductVariant, variant_id)
        if not variant:
            return jsonify({"error": "‚ùå ProductVariant not found"}), 404

        # 2. ‚≠ê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö StockIn
        related_stockinEntry = db.session.query(StockInEntry).filter_by(variant_id=variant_id).first()
        if related_stockinEntry:
            return jsonify({
                "error": "‚ùå Cannot delete variant. It is linked to existing stock-in records."
            }), 409 # HTTP 409 Conflict

        # 3. ‚≠ê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö Sale
        related_saleorder = db.session.query(Sale).filter_by(variant_id=variant_id).first()
        if related_saleorder:
            return jsonify({
                "error": "‚ùå Cannot delete variant. It is linked to existing sales orders."
            }), 409 # HTTP 409 Conflict

        # 4. ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡∏à‡∏∂‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
        db.session.delete(variant)
        db.session.commit()
        
        return jsonify({"message": f"‚úÖ ProductVariant {variant_id} deleted permanently"}), 200
        
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({"error": f"‚ùå Database error: {str(e)}"}), 500
    except Exception as e:
        return jsonify({"error": f"‚ùå Unexpected error: {str(e)}"}), 500